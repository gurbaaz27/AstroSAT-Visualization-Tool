{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91809\\\\Desktop\\\\AstroSAT-Visualization-Tool\\\\src\\\\components\\\\Aladin\\\\Aladin.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Aladin = () => {\n  _s();\n\n  // function for connecting the API endpoints\n  const sendHttpRequest = (method, url, data) => {\n    return fetch(url, {\n      method: method,\n      body: JSON.stringify(data),\n      headers: data ? {\n        'Content-Type': 'application/json'\n      } : {}\n    }).then(response => {\n      if (response.status >= 400) {\n        // !response.ok\n        return response.json().then(errResData => {\n          const error = new Error('Something went wrong!');\n          error.data = errResData;\n          throw error;\n        });\n      }\n\n      return response.json();\n    });\n  }; // function for fetching the cpmplaint database\n\n\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    sendHttpRequest('GET', 'http://localhost:8000/isro/getdata/').then(responseData => {\n      console.log(responseData.data);\n      setData(responseData.data);\n    });\n  }, []);\n  useEffect(() => {\n    let aladin = window.A.aladin(\"#aladin-lite-div\", {\n      survey: \"P/DSS2/color\",\n      fov: 60\n    });\n    aladin.setFov(1);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"aladin-lite-div\",\n    style: {\n      width: \"74vw\",\n      height: \"80vh\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Aladin, \"MNW7rnkI9oNPb711ySWHHHkbM9Y=\");\n\n_c = Aladin;\nexport default Aladin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Aladin\");","map":{"version":3,"sources":["C:/Users/91809/Desktop/AstroSAT-Visualization-Tool/src/components/Aladin/Aladin.jsx"],"names":["React","useEffect","useState","Aladin","sendHttpRequest","method","url","data","fetch","body","JSON","stringify","headers","then","response","status","json","errResData","error","Error","setData","responseData","console","log","aladin","window","A","survey","fov","setFov","width","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB;AACA,QAAMC,eAAe,GAAG,CAACC,MAAD,EAASC,GAAT,EAAcC,IAAd,KAAuB;AAC7C,WAAOC,KAAK,CAACF,GAAD,EAAM;AAChBD,MAAAA,MAAM,EAAEA,MADQ;AAEhBI,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAFU;AAGhBK,MAAAA,OAAO,EAAEL,IAAI,GAAG;AAAE,wBAAgB;AAAlB,OAAH,GAA4C;AAHzC,KAAN,CAAL,CAIJM,IAJI,CAICC,QAAQ,IAAI;AAClB,UAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AAC1B;AACA,eAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBI,UAAU,IAAI;AACxC,gBAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAU,uBAAV,CAAd;AACAD,UAAAA,KAAK,CAACX,IAAN,GAAaU,UAAb;AACA,gBAAMC,KAAN;AACD,SAJM,CAAP;AAKD;;AACD,aAAOJ,QAAQ,CAACE,IAAT,EAAP;AACD,KAdM,CAAP;AAeD,GAhBD,CAFmB,CAoBnB;;;AACA,QAAM,CAACT,IAAD,EAAOa,OAAP,IAAkBlB,QAAQ,CAAC,EAAD,CAAhC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,eAAe,CAAC,KAAD,EAAQ,qCAAR,CAAf,CAA8DS,IAA9D,CAAmEQ,YAAY,IAAI;AACjFC,MAAAA,OAAO,CAACC,GAAR,CAAYF,YAAY,CAACd,IAAzB;AACAa,MAAAA,OAAO,CAACC,YAAY,CAACd,IAAd,CAAP;AACD,KAHD;AAID,GALQ,EAKP,EALO,CAAT;AAQAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIuB,MAAM,GAAGC,MAAM,CAACC,CAAP,CAASF,MAAT,CAAgB,kBAAhB,EAAoC;AAC/CG,MAAAA,MAAM,EAAE,cADuC;AAE/CC,MAAAA,GAAG,EAAE;AAF0C,KAApC,CAAb;AAIAJ,IAAAA,MAAM,CAACK,MAAP,CAAc,CAAd;AACD,GANQ,EAMN,EANM,CAAT;AAQA,sBACE;AACE,IAAA,EAAE,EAAC,iBADL;AAEE,IAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,MADF;AAELC,MAAAA,MAAM,EAAE;AAFH;AAFT;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CA/CD;;GAAM5B,M;;KAAAA,M;AAiDN,eAAeA,MAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst Aladin = () => {\r\n  // function for connecting the API endpoints\r\n  const sendHttpRequest = (method, url, data) => {\r\n    return fetch(url, {\r\n      method: method,\r\n      body: JSON.stringify(data),\r\n      headers: data ? { 'Content-Type': 'application/json' } : {}\r\n    }).then(response => {\r\n      if (response.status >= 400) {\r\n        // !response.ok\r\n        return response.json().then(errResData => {\r\n          const error = new Error('Something went wrong!');\r\n          error.data = errResData;\r\n          throw error;\r\n        });\r\n      }\r\n      return response.json();\r\n    });\r\n  };\r\n  \r\n  // function for fetching the cpmplaint database\r\n  const [data, setData] = useState([])\r\n  useEffect(() => {\r\n    sendHttpRequest('GET', 'http://localhost:8000/isro/getdata/').then(responseData => {\r\n      console.log(responseData.data);\r\n      setData(responseData.data);\r\n    });\r\n  },[])\r\n\r\n\r\n  useEffect(() => {\r\n    let aladin = window.A.aladin(\"#aladin-lite-div\", {\r\n      survey: \"P/DSS2/color\",\r\n      fov: 60,\r\n    });\r\n    aladin.setFov(1);\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      id=\"aladin-lite-div\"\r\n      style={{\r\n        width: \"74vw\",\r\n        height: \"80vh\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Aladin;\r\n"]},"metadata":{},"sourceType":"module"}