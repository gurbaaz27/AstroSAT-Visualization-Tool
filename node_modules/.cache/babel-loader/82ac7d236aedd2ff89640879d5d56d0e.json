{"ast":null,"code":"var _jsxFileName = \"/home/kartikcodes/Desktop/AstroSAT-Visualization-Tool/src/components/Aladin/Aladin.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Aladin = () => {\n  _s();\n\n  // function for connecting the API endpoints\n  const sendHttpRequest = (method, url, data) => {\n    return fetch(url, {\n      method: method,\n      body: JSON.stringify(data),\n      headers: data ? {\n        \"Content-Type\": \"application/json\"\n      } : {}\n    }).then(response => {\n      if (response.status >= 400) {\n        // !response.ok\n        return response.json().then(errResData => {\n          const error = new Error(\"Something went wrong!\");\n          error.data = errResData;\n          throw error;\n        });\n      }\n\n      return response.json();\n    });\n  }; // function for fetching the cpmplaint database\n\n\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    sendHttpRequest(\"GET\", \"http://127.0.0.1:8000/isro/getdata/\").then(responseData => {\n      console.log(responseData);\n      setData(responseData);\n    });\n  }, []);\n  useEffect(() => {\n    let aladin = window.A.aladin(\"#aladin-lite-div\", {\n      survey: \"P/DSS2/color\",\n      fov: 60\n    });\n    let markerLayer = window.A.catalog();\n    aladin.addCatalog(markerLayer);\n    var sources = data.map(dataset => window.A.marker(dataset.ra, dataset.dec));\n    markerLayer.addSources(sources);\n    aladin.setFov(1);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"aladin-lite-div\",\n    style: {\n      width: \"74vw\",\n      height: \"80vh\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Aladin, \"MNW7rnkI9oNPb711ySWHHHkbM9Y=\");\n\n_c = Aladin;\nexport default Aladin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Aladin\");","map":{"version":3,"sources":["/home/kartikcodes/Desktop/AstroSAT-Visualization-Tool/src/components/Aladin/Aladin.jsx"],"names":["React","useEffect","useState","Aladin","sendHttpRequest","method","url","data","fetch","body","JSON","stringify","headers","then","response","status","json","errResData","error","Error","setData","responseData","console","log","aladin","window","A","survey","fov","markerLayer","catalog","addCatalog","sources","map","dataset","marker","ra","dec","addSources","setFov","width","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB;AACA,QAAMC,eAAe,GAAG,CAACC,MAAD,EAASC,GAAT,EAAcC,IAAd,KAAuB;AAC7C,WAAOC,KAAK,CAACF,GAAD,EAAM;AAChBD,MAAAA,MAAM,EAAEA,MADQ;AAEhBI,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAFU;AAGhBK,MAAAA,OAAO,EAAEL,IAAI,GAAG;AAAE,wBAAgB;AAAlB,OAAH,GAA4C;AAHzC,KAAN,CAAL,CAIJM,IAJI,CAIEC,QAAD,IAAc;AACpB,UAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AAC1B;AACA,eAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAsBI,UAAD,IAAgB;AAC1C,gBAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAU,uBAAV,CAAd;AACAD,UAAAA,KAAK,CAACX,IAAN,GAAaU,UAAb;AACA,gBAAMC,KAAN;AACD,SAJM,CAAP;AAKD;;AACD,aAAOJ,QAAQ,CAACE,IAAT,EAAP;AACD,KAdM,CAAP;AAeD,GAhBD,CAFmB,CAoBnB;;;AACA,QAAM,CAACT,IAAD,EAAOa,OAAP,IAAkBlB,QAAQ,CAAC,EAAD,CAAhC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,eAAe,CAAC,KAAD,EAAQ,qCAAR,CAAf,CAA8DS,IAA9D,CACGQ,YAAD,IAAkB;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACAD,MAAAA,OAAO,CAACC,YAAD,CAAP;AACD,KAJH;AAMD,GAPQ,EAON,EAPM,CAAT;AASApB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIuB,MAAM,GAAGC,MAAM,CAACC,CAAP,CAASF,MAAT,CAAgB,kBAAhB,EAAoC;AAC/CG,MAAAA,MAAM,EAAE,cADuC;AAE/CC,MAAAA,GAAG,EAAE;AAF0C,KAApC,CAAb;AAIA,QAAIC,WAAW,GAAGJ,MAAM,CAACC,CAAP,CAASI,OAAT,EAAlB;AACAN,IAAAA,MAAM,CAACO,UAAP,CAAkBF,WAAlB;AACA,QAAIG,OAAO,GAAGzB,IAAI,CAAC0B,GAAL,CAAUC,OAAD,IACrBT,MAAM,CAACC,CAAP,CAASS,MAAT,CAAgBD,OAAO,CAACE,EAAxB,EAA4BF,OAAO,CAACG,GAApC,CADY,CAAd;AAGAR,IAAAA,WAAW,CAACS,UAAZ,CAAuBN,OAAvB;AACAR,IAAAA,MAAM,CAACe,MAAP,CAAc,CAAd;AACD,GAZQ,EAYN,EAZM,CAAT;AAcA,sBACE;AACE,IAAA,EAAE,EAAC,iBADL;AAEE,IAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,MADF;AAELC,MAAAA,MAAM,EAAE;AAFH;AAFT;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAtDD;;GAAMtC,M;;KAAAA,M;AAwDN,eAAeA,MAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst Aladin = () => {\n  // function for connecting the API endpoints\n  const sendHttpRequest = (method, url, data) => {\n    return fetch(url, {\n      method: method,\n      body: JSON.stringify(data),\n      headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    }).then((response) => {\n      if (response.status >= 400) {\n        // !response.ok\n        return response.json().then((errResData) => {\n          const error = new Error(\"Something went wrong!\");\n          error.data = errResData;\n          throw error;\n        });\n      }\n      return response.json();\n    });\n  };\n\n  // function for fetching the cpmplaint database\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    sendHttpRequest(\"GET\", \"http://127.0.0.1:8000/isro/getdata/\").then(\n      (responseData) => {\n        console.log(responseData);\n        setData(responseData);\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    let aladin = window.A.aladin(\"#aladin-lite-div\", {\n      survey: \"P/DSS2/color\",\n      fov: 60,\n    });\n    let markerLayer = window.A.catalog();\n    aladin.addCatalog(markerLayer);\n    var sources = data.map((dataset) =>\n      window.A.marker(dataset.ra, dataset.dec)\n    );\n    markerLayer.addSources(sources);\n    aladin.setFov(1);\n  }, []);\n\n  return (\n    <div\n      id=\"aladin-lite-div\"\n      style={{\n        width: \"74vw\",\n        height: \"80vh\",\n      }}\n    />\n  );\n};\n\nexport default Aladin;\n"]},"metadata":{},"sourceType":"module"}